{"version":3,"sources":["components/todolist/todolist.module.css","components/taskitem/taskitem.module.css","components/button/button.module.css","components/text-input/textInput.module.css","components/editable-span/editableSpan.module.css","components/add-item-form/addItemForm.module.css","components/button/Button.tsx","components/text-input/TextInput.tsx","components/editable-span/EditableSpan.tsx","components/taskitem/TaskItem.tsx","components/Error.tsx","components/add-item-form/AddItemForm.tsx","components/todolist/TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Button","name","callBack","active","className","s","button","activeFilter","onClick","TextInput","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","restProps","finalSpanClassName","finalInputClassName","errorInput","e","currentTarget","value","key","EditableSpan","onChangeSpan","title","useState","editMode","setEditMode","inputText","setInputText","input","onBlur","autoFocus","text","span","onDoubleClick","TaskItem","task","changeIsDone","onRemoveTaskHandler","toDoListId","changeTaskTitle","isDone","taskItem","contentText","ctrlKey","id","Error","AddItemForm","addItem","setError","addTaskButtonHandler","trim","form","placeholder","TodoList","tasks","removeTask","addTask","removeToDoList","changeFilter","filter","changeToDoListTitle","wrapper","closeSvg","header","itemsList","map","t","btnWrapper","App","toDoListId_01","v1","toDoListId_02","setTasks","newTask","copyState","changeIsDoneTask","toDoLists","setToDoLists","todoList","newTodoList","toDoList","filteredTask","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1efe4f10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"todolist_wrapper__2Y-Vh\",\"header\":\"todolist_header__2cUHn\",\"input\":\"todolist_input__2WJqd\",\"addForm\":\"todolist_addForm__3n096\",\"itemsList\":\"todolist_itemsList__3Clwr\",\"reactSvg\":\"todolist_reactSvg__H5nCE\",\"startSvg\":\"todolist_startSvg__2N_vD\",\"btnWrapper\":\"todolist_btnWrapper__3IYZb\",\"closeSvg\":\"todolist_closeSvg__2jUzo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskItem\":\"taskitem_taskItem__1NqvF\",\"isDone\":\"taskitem_isDone__2GHdM\",\"contentText\":\"taskitem_contentText__2sgRM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__Fk1x9\",\"activeFilter\":\"button_activeFilter__3PDl_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"textInput_error__a4g9t\",\"errorInput\":\"textInput_errorInput__100HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"editableSpan_input__1koVy\",\"span\":\"editableSpan_span__1HsO1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addItemForm_form__1JMuq\",\"input\":\"addItemForm_input__3iJhG\"};","/*******************Button component*********************/\r\nimport React from 'react';\r\nimport s from './button.module.css'\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({name, callBack, active}) => {\r\n\r\n    const onClickHandler = () => callBack()\r\n\r\n    return <button className={!active ? s.button : s.button + \" \" + s.activeFilter} onClick={onClickHandler}>{name}</button>\r\n};\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callBack: () => void\r\n    active?: boolean\r\n};\r\n\r\n/*************************************************************/\r\n\r\n","/*******************TextInput component*********************/\r\nimport {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react';\r\nimport React from 'react';\r\nimport s from './textInput.module.css'\r\n\r\nexport const TextInput: React.FC<SuperInputTextPropsType> = ({   type, onChange,\r\n                                                                 onChangeText, onKeyPress,\r\n                                                                 onEnter, error,\r\n                                                                 className, spanClassName, ...restProps}) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = error ? `${s.errorInput} ${className}` : `${className}`\r\n\r\n\r\n    return <>\r\n        <input\r\n            type={'text'}\r\n            onChange={onChangeCallback}\r\n            onKeyPress={onKeyPressCallback}\r\n            className={finalInputClassName}\r\n\r\n            {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n        />\r\n        {error && <span className={finalSpanClassName}>{error}</span>}\r\n    </>\r\n};\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n/*************************************************************/\r\n\r\n","/***********************EditableSpan**************************/\r\nimport React, {useState} from 'react';\r\nimport { TextInput } from '../text-input/TextInput';\r\nimport s from './editableSpan.module.css'\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = ({onChangeSpan, title}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputText, setInputText] = useState<string>('')\r\n\r\n    const changeTextInputHandler = (text: string) => {\r\n        setInputText(text)\r\n    }\r\n    const keyPressEnterHandler = () => {\r\n        setEditMode(false)\r\n        onChangeSpan(inputText)\r\n    }\r\n    const onBlurInputHandler = () => {\r\n        setEditMode(false)\r\n        onChangeSpan(inputText)\r\n    }\r\n    const onDoubleClickSpan = () => {\r\n        setEditMode(true)\r\n        setInputText(title)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            {editMode ? <TextInput className={s.input} onBlur={onBlurInputHandler} autoFocus\r\n                                   onChangeText={changeTextInputHandler} value={inputText} onEnter={keyPressEnterHandler}/>\r\n                      : <span className={s.span} onDoubleClick={onDoubleClickSpan}>{title}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\ntype EditableSpanPropsType = {\r\n    onChangeSpan: (title: string) => void\r\n    title: string\r\n}\r\n\r\n/**********************************************************/","import {Button} from '../button/Button';\r\nimport React, {MouseEvent} from 'react';\r\nimport s from './taskitem.module.css'\r\nimport { TaskType } from '../../App';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\n\r\n/*******************TaskItem component*********************/\r\n\r\nexport const TaskItem: React.FC<TaskItemPropsType> = ({task, changeIsDone, onRemoveTaskHandler, toDoListId, changeTaskTitle}) => {\r\n\r\n    const onChangeIsDoneHandler = (e: MouseEvent<HTMLDivElement>) => {\r\n        e.ctrlKey && changeIsDone(task.id, toDoListId)\r\n    }\r\n    const onChangeTaskTitle = (title: string) => changeTaskTitle(task.id, toDoListId, title)\r\n\r\n    return (\r\n        <li key={task.id} className={!task.isDone ? s.taskItem : s.taskItem + ' ' + s.isDone}>\r\n            <div className={s.contentText} onClick={onChangeIsDoneHandler}>\r\n                <EditableSpan onChangeSpan={onChangeTaskTitle} title={task.title} />\r\n            </div>\r\n            <Button name={'X'} callBack={() => onRemoveTaskHandler(task.id, toDoListId)}/>\r\n        </li>\r\n    )\r\n};\r\n\r\ntype TaskItemPropsType = {\r\n    toDoListId: string\r\n    task: TaskType\r\n    changeIsDone: (id: string, toDoListId: string) => void\r\n    onRemoveTaskHandler: (id: string, idTodoList: string) => void\r\n    changeTaskTitle: (id: string, toDoListId: string, title: string) => void\r\n};\r\n\r\n/*************************************************************/\r\n","/*******************Error component*********************/\r\nimport React from 'react';\r\nimport './../App.css'\r\n\r\nexport const Error: React.FC<ErrorPropsType> = ({text}) => {\r\n    return (\r\n        <div className=\"error-message\">\r\n            {text}\r\n        </div>\r\n    );\r\n};\r\n\r\ntype ErrorPropsType = {\r\n    text: string | boolean\r\n};\r\n\r\n/*************************************************************/\r\n\r\n","import {TextInput} from '../text-input/TextInput';\r\nimport {Button} from '../button/Button';\r\nimport {Error} from '../Error';\r\nimport React, {useState} from 'react';\r\nimport s from './addItemForm.module.css'\r\n\r\n/***********************AddItemForm**************************/\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = ({addItem}) => {\r\n\r\n    const [inputText, setInputText] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const onChangeInputHandler = (text: string) => {\r\n        setError('')\r\n        setInputText(text)\r\n    }\r\n\r\n    const addTaskButtonHandler = () => {\r\n        if (inputText.trim()) {\r\n            addItem(inputText.trim())\r\n            setInputText('')\r\n        } else {\r\n            setError('Enter something')\r\n            setInputText('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.form}>\r\n            <TextInput placeholder={'Enter text...'}\r\n                       className={error ? \"error\" : s.input}\r\n                       type={'text'}\r\n                       value={inputText}\r\n                       onChangeText={onChangeInputHandler}\r\n                       onEnter={addTaskButtonHandler}/>\r\n            <Button name={'+'} callBack={addTaskButtonHandler}/>\r\n            {error && <Error text={error}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n/**********************************************************/","import React from 'react';\r\nimport {TaskItem} from '../taskitem/TaskItem';\r\nimport s from './todolist.module.css'\r\nimport {CgCloseR} from 'react-icons/cg'\r\nimport {FilterType, TaskType} from '../../App';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport { Button } from '../button/Button';\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = ({title, tasks, removeTask, addTask, changeIsDone, id, removeToDoList, changeFilter, filter, changeTaskTitle, changeToDoListTitle}) => {\r\n\r\n    const onChangeTodoListTitle = (title: string) => {\r\n        changeToDoListTitle(id, title)\r\n    }\r\n    const onRemoveTaskHandler = (id: string, toDoListId: string) => removeTask(id, toDoListId)\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <CgCloseR onClick={() => removeToDoList(id)} className={s.closeSvg}/>\r\n            <h3 className={s.header}>\r\n               <EditableSpan onChangeSpan={onChangeTodoListTitle} title={title}/>\r\n            </h3>\r\n            <AddItemForm addItem={(title: string) => addTask(title, id)}/>\r\n            <ul className={s.itemsList}>\r\n                {tasks.map(t => <TaskItem toDoListId={id} task={t} key={t.id} changeIsDone={changeIsDone} onRemoveTaskHandler={onRemoveTaskHandler} changeTaskTitle={changeTaskTitle}/>)}\r\n            </ul>\r\n            <div className={s.btnWrapper}>\r\n                <Button active={filter === \"all\"} name={'All'} callBack={() => changeFilter('all', id)}/>\r\n                <Button active={filter === \"active\"} name={'Active'} callBack={() => changeFilter('active', id)}/>\r\n                <Button active={filter === \"completed\"} name={'Completed'} callBack={() => changeFilter('completed', id)}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    removeToDoList: (id: string) => void\r\n    addTask: (title: string, toDoListId: string) => void\r\n    changeIsDone: (id: string, toDoListId: string) => void\r\n    changeFilter: (filter: FilterType, toDoListId: string) => void\r\n    filter: FilterType\r\n    changeTaskTitle: (id: string, toDoListId: string, title: string) => void\r\n    changeToDoListTitle: (id: string, title: string) => void\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport './css/animations.css'\r\nimport {TodoList} from './components/todolist/TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './components/add-item-form/AddItemForm';\r\n\r\nfunction App() {\r\n\r\n    const toDoListId_01 = v1()\r\n    const toDoListId_02 = v1()\r\n\r\n    /****************** Tasks Store *************/\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [toDoListId_01]: [{id: v1(), title: 'Hello', isDone: false}],\r\n        [toDoListId_02]: [{id: v1(), title: 'Hello', isDone: false}]\r\n    })\r\n\r\n    const addTask = (title: string, toDoListId: string) => {\r\n        const newTask = {id: v1(), title, isDone: false}\r\n        const copyState = {...tasks}\r\n        copyState[toDoListId] = [newTask, ...tasks[toDoListId]]\r\n        setTasks(copyState)\r\n    }\r\n    const removeTask = (id: string, toDoListId: string) => {\r\n        tasks[toDoListId] = tasks[toDoListId].filter(t => t.id !== id)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeIsDoneTask = (id: string, toDoListId: string) => {\r\n        const copyState = {...tasks}\r\n        copyState[toDoListId] = [...tasks[toDoListId].map(t => t.id === id ? {...t, isDone: !t.isDone} : t)]\r\n        setTasks(copyState)\r\n    }\r\n    const changeTaskTitle = (id: string, toDoListId: string, title: string) => {\r\n        const copyState = {...tasks}\r\n        copyState[toDoListId] = [...tasks[toDoListId].map(t => t.id === id ? {...t, title} : t)]\r\n        setTasks(copyState)\r\n    }\r\n\r\n    /*************************************************/\r\n\r\n    /******************* ToDoLists Store *************/\r\n\r\n    const [toDoLists, setToDoLists] = useState<Array<ToDoListType>>([\r\n        {id: toDoListId_01, title:'What to learn', filter: 'all'},\r\n        {id: toDoListId_02, title:'What to learn', filter: 'all'},\r\n    ])\r\n\r\n    const addToDoList = (title: string) => {\r\n        const toDoListId = v1()\r\n        const newTodoList: ToDoListType = {id: toDoListId, title, filter: 'all'}\r\n        setToDoLists([...toDoLists, newTodoList])\r\n        setTasks({...tasks, [toDoListId]: []})\r\n    }\r\n    const removeToDoList = (id: string) => setToDoLists([...toDoLists.filter(todoList => todoList.id !== id)])\r\n    const changeFilter = (filter: FilterType, toDoListId: string) => setToDoLists(toDoLists.map(t => t.id === toDoListId ? {...t, filter} : t))\r\n    const changeToDoListTitle = (id: string, title: string) => setToDoLists(toDoLists.map(t => t.id === id ? {...t, title: title} : t))\r\n\r\n    /*************************************************/\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n\r\n            <AddItemForm addItem={addToDoList} />\r\n            {toDoLists.map(toDoList => {\r\n                const filteredTask = toDoList.filter === \"active\" ? tasks[toDoList.id].filter(t => !t.isDone)\r\n                                   : toDoList.filter === \"completed\" ? tasks[toDoList.id].filter(t => t.isDone)\r\n                                   : tasks[toDoList.id]\r\n                return <TodoList key={toDoList.id} id={toDoList.id}\r\n                                 filter={toDoList.filter} title={toDoList.title}\r\n                                 tasks={filteredTask} removeToDoList={removeToDoList}\r\n                                 changeFilter={changeFilter} removeTask={removeTask}\r\n                                 addTask={addTask} changeTaskTitle={changeTaskTitle}\r\n                                 changeToDoListTitle={changeToDoListTitle} changeIsDone={changeIsDoneTask}\r\n                />\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    filter: FilterType\r\n    title: string\r\n}\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './nullstyle.css'\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}