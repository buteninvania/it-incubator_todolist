{"version":3,"sources":["components/todolist/todolist.module.css","components/taskitem/taskitem.module.css","components/button/button.module.css","components/text-input/textInput.module.css","components/editable-span/editableSpan.module.css","components/add-item-form/addItemForm.module.css","serviceWorker.ts","components/button/Button.tsx","components/text-input/TextInput.tsx","components/editable-span/EditableSpan.tsx","components/taskitem/TaskItem.tsx","components/Error.tsx","components/add-item-form/AddItemForm.tsx","components/todolist/TodoList.tsx","state/task-reducer/task-reducer.ts","state/todolist-reducer.ts","AppWitchRedux.tsx","state/store-redux.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Button","React","memo","name","callBack","active","console","log","className","s","button","activeFilter","onClick","TextInput","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","restProps","finalSpanClassName","finalInputClassName","errorInput","e","currentTarget","value","key","EditableSpan","onChangeSpan","title","useState","editMode","setEditMode","inputText","setInputText","input","onBlur","autoFocus","text","span","onDoubleClick","TaskItem","task","changeIsDone","onRemoveTaskHandler","toDoListId","changeTaskTitle","isDone","taskItem","contentText","ctrlKey","id","Error","AddItemForm","addItem","setError","addTaskButtonHandler","useCallback","trim","form","placeholder","TodoList","tasks","removeTask","addTask","removeToDoList","changeFilter","filter","changeToDoListTitle","onChangeTodoListTitle","filteredTask","t","wrapper","closeSvg","header","itemsList","map","btnWrapper","initialState","AppWitchRedux","dispatch","useDispatch","useSelector","state","todolists","addTaskAC","removeTaskAC","changeIsDoneTask","changeIsDoneTaskAC","changeTaskTitleAC","addToDoList","v1","addTodoListAC","removeTodoListAC","changeTodoListFilterAC","changeTodoListTitleAC","toDoList","rootReducer","combineReducers","action","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.ad615ced.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"todolist_wrapper__2Y-Vh\",\"header\":\"todolist_header__2cUHn\",\"input\":\"todolist_input__2WJqd\",\"addForm\":\"todolist_addForm__3n096\",\"itemsList\":\"todolist_itemsList__3Clwr\",\"reactSvg\":\"todolist_reactSvg__H5nCE\",\"startSvg\":\"todolist_startSvg__2N_vD\",\"btnWrapper\":\"todolist_btnWrapper__3IYZb\",\"closeSvg\":\"todolist_closeSvg__2jUzo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskItem\":\"taskitem_taskItem__1NqvF\",\"isDone\":\"taskitem_isDone__2GHdM\",\"contentText\":\"taskitem_contentText__2sgRM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__Fk1x9\",\"activeFilter\":\"button_activeFilter__3PDl_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"textInput_error__a4g9t\",\"errorInput\":\"textInput_errorInput__100HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"editableSpan_input__1koVy\",\"span\":\"editableSpan_span__1HsO1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"addItemForm_form__1JMuq\",\"input\":\"addItemForm_input__3iJhG\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/*******************Button component*********************/\r\nimport React from 'react';\r\nimport s from './button.module.css'\r\n\r\nexport const Button: React.FC<ButtonPropsType> = React.memo(({name, callBack, active}) => {\r\n\r\n    const onClickHandler = () => callBack()\r\n\r\n    console.log('super-button')\r\n\r\n    return (<button className={!active ? s.button : s.button + \" \" + s.activeFilter} onClick={onClickHandler}>{name}</button>)\r\n});\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callBack: () => void\r\n    active?: boolean\r\n};\r\n\r\n/*************************************************************/\r\n\r\n","/*******************TextInput component*********************/\r\nimport {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react';\r\nimport React from 'react';\r\nimport s from './textInput.module.css'\r\n\r\nexport const TextInput: React.FC<SuperInputTextPropsType> = React.memo(({   type, onChange,\r\n                                                                 onChangeText, onKeyPress,\r\n                                                                 onEnter, error,\r\n                                                                 className, spanClassName, ...restProps}) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = error ? `${s.errorInput} ${className}` : `${className}`\r\n\r\n    console.log('super-input')\r\n\r\n    return <>\r\n        <input\r\n            type={'text'}\r\n            onChange={onChangeCallback}\r\n            onKeyPress={onKeyPressCallback}\r\n            className={finalInputClassName}\r\n\r\n            {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n        />\r\n        {error && <span className={finalSpanClassName}>{error}</span>}\r\n    </>\r\n});\r\n\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n/*************************************************************/\r\n\r\n","/***********************EditableSpan**************************/\r\nimport React, {useState} from 'react';\r\nimport { TextInput } from '../text-input/TextInput';\r\nimport s from './editableSpan.module.css'\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(({onChangeSpan, title}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputText, setInputText] = useState<string>('')\r\n\r\n    const changeTextInputHandler = (text: string) => {\r\n        setInputText(text)\r\n    }\r\n    const keyPressEnterHandler = () => {\r\n        setEditMode(false)\r\n        onChangeSpan(inputText)\r\n    }\r\n    const onBlurInputHandler = () => {\r\n        setEditMode(false)\r\n        onChangeSpan(inputText)\r\n    }\r\n    const onDoubleClickSpan = () => {\r\n        setEditMode(true)\r\n        setInputText(title)\r\n    }\r\n\r\n    console.log('editable-span')\r\n\r\n    return (\r\n        <>\r\n            {editMode ? <TextInput className={s.input}\r\n                                   onBlur={onBlurInputHandler}\r\n                                   autoFocus\r\n                                   onChangeText={changeTextInputHandler}\r\n                                   value={inputText}\r\n                                   onEnter={keyPressEnterHandler}/>\r\n                       : <span className={s.span} onDoubleClick={onDoubleClickSpan}>{title}</span>}\r\n        </>\r\n    )\r\n})\r\n\r\ntype EditableSpanPropsType = {\r\n    onChangeSpan: (title: string) => void\r\n    title: string\r\n}\r\n\r\n/**********************************************************/","import {Button} from '../button/Button';\r\nimport React, {MouseEvent} from 'react';\r\nimport s from './taskitem.module.css'\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport { TaskType } from '../../state/task-reducer/task-reducer.types';\r\n\r\n/*******************TaskItem component*********************/\r\n\r\nexport const TaskItem: React.FC<TaskItemPropsType> = React.memo(({task, changeIsDone, onRemoveTaskHandler, toDoListId, changeTaskTitle}) => {\r\n\r\n    const onChangeIsDoneHandler = (e: MouseEvent<HTMLDivElement>) => {\r\n\r\n        e.ctrlKey && changeIsDone(task.id, toDoListId)\r\n    }\r\n    const onChangeTaskTitle = (title: string) => changeTaskTitle(task.id, toDoListId, title)\r\n\r\n    console.log('task item')\r\n\r\n    return (\r\n        <li key={task.id} className={!task.isDone ? s.taskItem : s.taskItem + ' ' + s.isDone}>\r\n            <div className={s.contentText} onClick={onChangeIsDoneHandler}>\r\n                <EditableSpan onChangeSpan={onChangeTaskTitle} title={task.title} />\r\n            </div>\r\n            <Button name={'X'} callBack={() => onRemoveTaskHandler(task.id, toDoListId)}/>\r\n        </li>\r\n    )\r\n});\r\n\r\ntype TaskItemPropsType = {\r\n    toDoListId: string\r\n    task: TaskType\r\n    changeIsDone: (id: string, toDoListId: string) => void\r\n    onRemoveTaskHandler: (id: string, idTodoList: string) => void\r\n    changeTaskTitle: (id: string, toDoListId: string, title: string) => void\r\n};\r\n\r\n/*************************************************************/\r\n","/*******************Error component*********************/\r\nimport React from 'react';\r\nimport './../App.css'\r\n\r\nexport const Error: React.FC<ErrorPropsType> = React.memo(({text}) => {\r\n\r\n    console.log('super-error')\r\n\r\n    return (\r\n        <div className=\"error-message\">\r\n            {text}\r\n        </div>\r\n    );\r\n});\r\n\r\ntype ErrorPropsType = {\r\n    text: string | boolean\r\n};\r\n\r\n/*************************************************************/\r\n\r\n","import {TextInput} from '../text-input/TextInput';\r\nimport {Button} from '../button/Button';\r\nimport {Error} from '../Error';\r\nimport React, {useCallback, useState} from 'react';\r\nimport s from './addItemForm.module.css'\r\n\r\n/***********************AddItemForm**************************/\r\n\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({addItem}) => {\r\n\r\n    const [inputText, setInputText] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const onChangeInputHandler = (text: string) => {\r\n        setError('')\r\n        setInputText(text)\r\n    }\r\n\r\n    const addTaskButtonHandler = useCallback(() => {\r\n        if (inputText.trim()) {\r\n            addItem(inputText.trim())\r\n            setInputText('')\r\n        } else {\r\n            setError('Enter something')\r\n            setInputText('')\r\n        }\r\n    }, [inputText, addItem])\r\n\r\n    console.log('Add-Item-Form')\r\n\r\n    return (\r\n        <div className={s.form}>\r\n            <TextInput placeholder={'Enter text...'}\r\n                       className={error ? \"error\" : s.input}\r\n                       type={'text'}\r\n                       value={inputText}\r\n                       onChangeText={onChangeInputHandler}\r\n                       onEnter={addTaskButtonHandler}/>\r\n            <Button name={'+'} callBack={addTaskButtonHandler}/>\r\n            {error && <Error text={error}/>}\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\n/**********************************************************/","import React, { useCallback } from 'react';\r\nimport {TaskItem} from '../taskitem/TaskItem';\r\nimport s from './todolist.module.css'\r\nimport {CgCloseR} from 'react-icons/cg'\r\nimport {FilterType} from '../../App';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport { Button } from '../button/Button';\r\nimport { EditableSpan } from '../editable-span/EditableSpan';\r\nimport { TaskType } from '../../state/task-reducer/task-reducer.types';\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = React.memo(({title, tasks,\r\n                                                          removeTask, addTask,\r\n                                                          changeIsDone, id,\r\n                                                          removeToDoList, changeFilter,\r\n                                                          filter, changeTaskTitle,\r\n                                                          changeToDoListTitle}) => {\r\n\r\n    const onChangeTodoListTitle = useCallback((title: string) => changeToDoListTitle(id, title), [changeToDoListTitle, id])\r\n    const onRemoveTaskHandler = useCallback((id: string, toDoListId: string) => removeTask(id, toDoListId), [removeTask])\r\n\r\n    console.log('super-todolist')\r\n\r\n    const filteredTask = filter === \"active\" ? tasks.filter(t => !t.isDone) :\r\n                         filter === \"completed\" ? tasks.filter(t => t.isDone) : tasks\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <CgCloseR onClick={() => removeToDoList(id)} className={s.closeSvg}/>\r\n            <h3 className={s.header}>\r\n               <EditableSpan onChangeSpan={onChangeTodoListTitle} title={title}/>\r\n            </h3>\r\n            <AddItemForm addItem={(title: string) => addTask(title, id)}/>\r\n            <ul className={s.itemsList}>\r\n                {filteredTask.map(t => <TaskItem toDoListId={id} task={t} key={t.id} changeIsDone={changeIsDone} onRemoveTaskHandler={onRemoveTaskHandler} changeTaskTitle={changeTaskTitle}/>)}\r\n            </ul>\r\n            <div className={s.btnWrapper}>\r\n                <Button active={filter === \"all\"} name={'All'} callBack={() => changeFilter('all', id)}/>\r\n                <Button active={filter === \"active\"} name={'Active'} callBack={() => changeFilter('active', id)}/>\r\n                <Button active={filter === \"completed\"} name={'Completed'} callBack={() => changeFilter('completed', id)}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\ntype TodoListPropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    removeToDoList: (id: string) => void\r\n    addTask: (title: string, toDoListId: string) => void\r\n    changeIsDone: (id: string, toDoListId: string) => void\r\n    changeFilter: (filter: FilterType, toDoListId: string) => void\r\n    filter: FilterType\r\n    changeTaskTitle: (id: string, toDoListId: string, title: string) => void\r\n    changeToDoListTitle: (id: string, title: string) => void\r\n}\r\n","// /****************** Tasks Store *************/\r\n//\r\n// const [tasks, setTasks] = useState<TaskStateType>({\r\n//     [toDoListId_01]: [{id: v1(), title: 'Check mail ;)', isDone: false}],\r\n// })\r\n//\r\n// const addTask = (title: string, toDoListId: string) => {\r\n//     const newTask = {id: v1(), title, isDone: false}\r\n//     const copyState = {...tasks}\r\n//     copyState[toDoListId] = [newTask, ...tasks[toDoListId]]\r\n//     setTasks(copyState)\r\n// }\r\n// const removeTask = (id: string, toDoListId: string) => {\r\n//     tasks[toDoListId] = tasks[toDoListId].filter(t => t.id !== id)\r\n//     setTasks({...tasks})\r\n// }\r\n// const changeIsDoneTask = (id: string, toDoListId: string) => {\r\n//     const copyState = {...tasks}\r\n//     copyState[toDoListId] = [...tasks[toDoListId].map(t => t.id === id ? {...t, isDone: !t.isDone} : t)]\r\n//     setTasks(copyState)\r\n// }\r\n// const changeTaskTitle = (id: string, toDoListId: string, title: string) => {\r\n//     const copyState = {...tasks}\r\n//     copyState[toDoListId] = [...tasks[toDoListId].map(t => t.id === id ? {...t, title} : t)]\r\n//     setTasks(copyState)\r\n// }\r\n//\r\n// /*************************************************/\r\n\r\nimport { v1 } from \"uuid\";\r\nimport {AddTaskActionType, ChangeIsDoneTaskActionType, ChangeTaskTitleActionType, RemoveTaskActionType,\r\n    TaskActionType, TaskStateType } from \"./task-reducer.types\";\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\n\r\nexport const addTaskAC = (title: string, toDoListId: string): AddTaskActionType => ({type: 'ADD_TASK', title, toDoListId})\r\nexport const removeTaskAC = (id: string, toDoListId: string): RemoveTaskActionType => ({type: 'REMOVE_TASK', id, toDoListId})\r\nexport const changeIsDoneTaskAC = (id: string, toDoListId: string): ChangeIsDoneTaskActionType => ({type: 'CHANGE_IS_DONE_TASK', id, toDoListId})\r\nexport const changeTaskTitleAC = (id: string, toDoListId: string, title: string): ChangeTaskTitleActionType => ({type: 'CHANGE_TASK_TITLE', id, toDoListId, title})\r\n\r\nexport const taskReducer = (state: TaskStateType = initialState, action: TaskActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_TASK':\r\n            return {...state, [action.toDoListId]: [ {id: v1(), title: action.title, isDone: false} , ...state[action.toDoListId]]}\r\n        case 'REMOVE_TASK':\r\n            return {...state, [action.toDoListId]: state[action.toDoListId].filter(t => t.id !== action.id)}\r\n        case 'CHANGE_IS_DONE_TASK':\r\n            return {...state, [action.toDoListId]: state[action.toDoListId].map(t => t.id === action.id ? {...t, isDone: !t.isDone} : t)}\r\n        case 'CHANGE_TASK_TITLE':\r\n            return {...state, [action.toDoListId]: state[action.toDoListId].map(t => t.id === action.id ? {...t, title: action.title} : t)}\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import { v1 } from \"uuid\"\r\nimport {FilterType, ToDoListType } from \"../App\"\r\n\r\nexport type AddTodoListActionType = { type: 'ADD-TODOLIST', title: string , id: string}\r\nexport type RemoveTodoListActionType = { type: 'REMOVE-TODOLIST', id: string }\r\nexport type ChangeTodoListTitleActionType = { type: 'CHANGE-TODOLIST-TITLE', id: string, title: string }\r\nexport type ChangeTodolistFilterActionType = { type: 'CHANGE-TODOLIST-FILTER', id: string, filter: FilterType }\r\n\r\nexport const addTodoListAC = (title: string):AddTodoListActionType => ({ type: 'ADD-TODOLIST', title, id: v1()})\r\nexport const removeTodoListAC = (id: string):RemoveTodoListActionType => ({ type: 'REMOVE-TODOLIST', id })\r\nexport const changeTodoListTitleAC = (title: string, id: string):ChangeTodoListTitleActionType => ({ type: 'CHANGE-TODOLIST-TITLE', id, title })\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterType):ChangeTodolistFilterActionType => ({ type: 'CHANGE-TODOLIST-FILTER', id, filter })\r\n\r\ntype ActionType = AddTodoListActionType | RemoveTodoListActionType | ChangeTodoListTitleActionType | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<ToDoListType> = []\r\n\r\nexport const todoListReducer = (state: Array<ToDoListType> = initialState, action: ActionType): Array<ToDoListType> => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.id, title: action.title, filter: 'all'}]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(t => t.id === action.id ? {...t, filter: action.filter} : t)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(t => t.id === action.id ? {...t, title: action.title} : t)\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport './css/animations.css'\r\nimport {TodoList} from './components/todolist/TodoList';\r\nimport {AddItemForm} from './components/add-item-form/AddItemForm';\r\nimport {TaskStateType} from './state/task-reducer/task-reducer.types';\r\nimport {addTaskAC, removeTaskAC, changeIsDoneTaskAC, changeTaskTitleAC } from './state/task-reducer/task-reducer';\r\nimport {addTodoListAC, changeTodoListFilterAC, changeTodoListTitleAC, removeTodoListAC} from './state/todolist-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootState} from './state/store-redux';\r\n\r\n\r\nfunction AppWitchRedux() {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootState, TaskStateType>(state => state.task)\r\n    const todolists = useSelector<AppRootState, Array<ToDoListType>>(state => state.todolists)\r\n\r\n    /****************** Tasks  *************/\r\n\r\n    const addTask = useCallback((title: string, toDoListId: string) => dispatch(addTaskAC(title,toDoListId)), [dispatch])\r\n    const removeTask = useCallback((id: string, toDoListId: string) => dispatch(removeTaskAC(id, toDoListId)), [dispatch])\r\n    const changeIsDoneTask = useCallback((id: string, toDoListId: string) => dispatch(changeIsDoneTaskAC(id, toDoListId)), [dispatch])\r\n    const changeTaskTitle = useCallback((id: string, toDoListId: string, title: string) => dispatch(changeTaskTitleAC(id, toDoListId, title)), [dispatch])\r\n\r\n    /*************************************************/\r\n\r\n    /******************* ToDoLists *************/\r\n\r\n    const addToDoList = useCallback((title: string) => dispatch(addTodoListAC(title)), [dispatch])\r\n    const removeToDoList = useCallback((id: string) => dispatch(removeTodoListAC(id)), [dispatch])\r\n    const changeFilter = useCallback((filter: FilterType, toDoListId: string) => dispatch(changeTodoListFilterAC(toDoListId, filter)), [dispatch])\r\n    const changeToDoListTitle = useCallback((id: string, title: string) => dispatch(changeTodoListTitleAC(title, id)), [dispatch])\r\n\r\n    /*************************************************/\r\n\r\n    console.log('App-Redux')\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <AddItemForm addItem={addToDoList} />\r\n            <div className=\"todolist-wrapper\">\r\n                {todolists.map(toDoList => {\r\n\r\n                    return <TodoList key={toDoList.id} id={toDoList.id}\r\n                                     filter={toDoList.filter} title={toDoList.title}\r\n                                     tasks={tasks[toDoList.id]} removeToDoList={removeToDoList}\r\n                                     changeFilter={changeFilter} removeTask={removeTask}\r\n                                     addTask={addTask} changeTaskTitle={changeTaskTitle}\r\n                                     changeToDoListTitle={changeToDoListTitle} changeIsDone={changeIsDoneTask}\r\n                    />\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWitchRedux;\r\n\r\nexport type ToDoListType = {\r\n    id: string\r\n    filter: FilterType\r\n    title: string\r\n}\r\n\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\n","import {combineReducers, createStore } from \"redux\";\r\nimport { taskReducer } from \"./task-reducer/task-reducer\";\r\nimport { todoListReducer } from \"./todolist-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todoListReducer,\r\n    task: taskReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './nullstyle.css'\r\nimport AppWitchRedux from './AppWitchRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store-redux';\r\n\r\nReactDOM.render(  /*<App /> */                                           /* ---> SPA using local state (useState)*/\r\n                  /*<AppWitchReducer/>*/                                 /* ---> SPA using reducers as state (useReducer)*/\r\n                    <Provider store={store}><AppWitchRedux/></Provider>, /*  ---> SPA using reducers as state control (useDispatch && useSelector)*/\r\n         document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}