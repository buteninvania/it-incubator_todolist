{"version":3,"sources":["components/taskitem/Taskitem.module.css","components/button/button.module.css","components/text-input/textInput.module.css","components/editable-span/editableSpan.module.css","components/add-item-form/AddItemForm.module.css","serviceWorker.ts","api/todolist-api.ts","components/button/Button.tsx","components/text-input/TextInput.tsx","components/editable-span/EditableSpan.tsx","api/api.ts","components/taskitem/TaskItem.tsx","components/error/Error.tsx","components/add-item-form/AddItemForm.tsx","components/todolist/TodoList.tsx","state/task-reducer/task-reducer.ts","state/todolist-reducer/todolist-reducer.ts","AppWitchRedux.tsx","state/store-redux.tsx","index.tsx","components/todolist/todolist.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPrioritys","Button","React","memo","name","callBack","active","className","s","button","activeFilter","onClick","TextInput","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","restProps","finalSpanClassName","finalInputClassName","errorInput","e","currentTarget","value","key","EditableSpan","onChangeSpan","title","useState","editMode","setEditMode","inputText","setInputText","console","log","input","onBlur","autoFocus","text","span","onDoubleClick","axios","create","withCredentials","baseURL","headers","TaskItem","task","changeIsDone","onRemoveTaskHandler","toDoListId","changeTaskTitle","status","New","taskItem","isDone","contentText","ctrlKey","id","Completed","Error","AddItemForm","addItem","placeholder","setError","addTaskButtonHandler","useCallback","trim","form","TodoList","tasks","removeTask","addTask","removeToDoList","changeFilter","filter","changeToDoListTitle","onChangeTodoListTitle","filteredTask","t","wrapper","closeSvg","header","itemsList","map","btnWrapper","initialState","creteTask","v1","order","todoListId","addedDate","description","completed","deadline","priority","Hi","startDate","AppWitchRedux","dispatch","useDispatch","useSelector","state","todolists","addTaskAC","removeTaskAC","changeIsDoneTask","changeIsDoneTaskAC","changeTaskTitleAC","addToDoList","addTodoListAC","removeTodoListAC","changeTodoListFilterAC","changeTodoListTitleAC","toDoList","rootReducer","combineReducers","action","copyState","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.89add785.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskItem\":\"Taskitem_taskItem__2pgAQ\",\"isDone\":\"Taskitem_isDone__2a0nD\",\"contentText\":\"Taskitem_contentText__vdlUB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__Fk1x9\",\"activeFilter\":\"button_activeFilter__3PDl_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"textInput_error__a4g9t\",\"errorInput\":\"textInput_errorInput__100HN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"editableSpan_input__1koVy\",\"span\":\"editableSpan_span__1HsO1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddItemForm_form__32K6c\",\"input\":\"AddItemForm_input__JiCkg\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {AxiosResponse} from 'axios';\r\nimport {instance} from './api';\r\n\r\n/** base response type from the server */\r\ntype BaseResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors: Array<string>\r\n    data: D\r\n}\r\n\r\n/** todolist response type */\r\nexport type TodoListType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\n\r\n/** get task response type */\r\ntype GetTaskResponseType = {\r\n    error: string | null\r\n    items: TaskItemType[]\r\n    totalCount: number\r\n}\r\n\r\n/** task statuses */\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\n/** task priority */\r\nexport enum TaskPrioritys {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n/** task type from the server */\r\nexport type TaskItemType = {\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: TaskStatuses\r\n    priority: TaskPrioritys\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\n/**\r\n * base URL https://social-network.samuraijs.com/api/1.1/\r\n * description: an object that works with the task list API\r\n */\r\nexport const todolistAPI = {\r\n    /** url: https://social-network.samuraijs.com/api/1.1/todo-lists\r\n     *  method: GET\r\n     *  response: Array<TodoListResponseType> as array of object\r\n     *  method to get list of task list */\r\n    getTodos: () => instance.get<TodoListType[]>('todo-lists')\r\n        .then(res => res.data),\r\n    /**\r\n     * url: https://social-network.samuraijs.com/api/1.1/todo-lists\r\n     * @param title - string, for the title of the new task list\r\n     * method: POST\r\n     * payload: title - string\r\n     * response: BaseResponseType where data TodoListResponseType\r\n     * method to create a new task list\r\n     */\r\n    createTodo: (title: string) => instance.post<BaseResponseType<{ item: TodoListType }>,\r\n        AxiosResponse<BaseResponseType<TodoListType>>, { title: string }>('todo-lists', {title})\r\n        .then(res => res.data),\r\n    /**\r\n     * url: https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}\r\n     * @param todolistId - string, to know which to-do list to delete\r\n     * method: DELETE\r\n     * response: BaseResponseType\r\n     * method to delete to-do list\r\n     */\r\n    deleteTodo: (todolistId: string) => instance.delete<BaseResponseType<{}>>(`todo-lists/${todolistId}`)\r\n        .then(res => res.data),\r\n    /**\r\n     * url: https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}\r\n     * @param todolistId - string, to know which to-do list to update\r\n     * @param title - string, for the title of the new task list\r\n     * method: PUT\r\n     * payload: title - string\r\n     * response: BaseResponseType\r\n     * method to update to-do list title\r\n     */\r\n    updateTodolistTitle: (todolistId: string, title: string) => instance.put<BaseResponseType<{ item: TodoListType }>,\r\n        AxiosResponse<BaseResponseType<{ item: TodoListType }>>, { title: string }>(`todo-lists/${todolistId}`, {title})\r\n        .then(res => res.data),\r\n    /**\r\n     * url: https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}/tasks\r\n     * @param todolistId - string, in order to get the tasks of this particular to-do list\r\n     * method: GET\r\n     * response: object {items: array of Task, totalCount: number, error: string | null}\r\n     * method for getting tasks for a to-do list\r\n     */\r\n    getTasks: (todolistId: string) => instance.get<GetTaskResponseType>(`todo-lists/${todolistId}/tasks`)\r\n        .then(res => res.data.items),\r\n    /**\r\n     * url: https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}/tasks\r\n     * @param todolistId - string, in which to-do list to put the task\r\n     * @param title - string, Task title\r\n     * method: POST\r\n     * response: object BaseResponseType<{item: TaskItemType}>\r\n     * method to create task in to-do list\r\n     */\r\n    createTask: (todolistId: string, title: string) => instance.post<BaseResponseType<{ item: TaskItemType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n        .then(res => res.data),\r\n    /**\r\n     * url: https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}/tasks/${taskId}\r\n     * method: DELETE\r\n     * response: object BaseResponseType\r\n     * method to remove task from to-do list\r\n     */\r\n    deleteTask: (todolistId: string, taskId: string) => instance.delete<BaseResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        .then(res => res.data),\r\n    /**\r\n     * url: https://social-network.samuraijs.com/api/1.1/todo-lists/${todolistId}/tasks/${taskId}\r\n     * method: PUT\r\n     * response: object BaseResponseType and data: TaskItemType\r\n     * task name update method\r\n     */\r\n    updateTask: (todolistId: string, taskId: string, title: string) => instance.put<BaseResponseType<TaskItemType>>(`todo-lists/${todolistId}/tasks/${taskId}`, {title})\r\n        .then(res => res.data)\r\n}\r\n","import React from 'react';\r\nimport s from './button.module.css';\r\n\r\nexport type ButtonPropsType = {\r\n    /**\r\n     * button name\r\n     */\r\n    name: string\r\n    /**\r\n     * callback function\r\n     */\r\n    callBack: () => void\r\n    /**\r\n     * Is the button active?\r\n     */\r\n    active?: boolean\r\n};\r\n\r\nexport const Button: React.FC<ButtonPropsType> = React.memo(({name, callBack, active}) => {\r\n\r\n    const onClickHandler = () => callBack()\r\n\r\n    return (\r\n        <button className={!active ? s.button : s.button + \" \" + s.activeFilter} onClick={onClickHandler}>\r\n            {name}\r\n        </button>\r\n    )\r\n});\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react';\r\nimport s from './textInput.module.css';\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\nexport type SuperInputTextPropsType = DefaultInputPropsType & {\r\n    /**\r\n     * @param value - string, callback function on text changes in input\r\n     */\r\n    onChangeText?: (value: string) => void\r\n    /**\r\n     * callback function after pressing the 'Enter' button\r\n     */\r\n    onEnter?: () => void\r\n    /**\r\n     * Have an error? Show 'span' with an error\r\n     */\r\n    error?: string\r\n    /**\r\n     * Set class for span error?\r\n     */\r\n    spanClassName?: string\r\n}\r\n\r\nexport const TextInput: React.FC<SuperInputTextPropsType> = React.memo(({\r\n                                                                            type, onChange, onChangeText, onKeyPress,\r\n                                                                            onEnter, error,\r\n                                                                            className, spanClassName, ...restProps\r\n                                                                        }) => {\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = error ? `${s.errorInput} ${className}` : `${className}`\r\n\r\n    return <>\r\n        <input\r\n            type={'text'}\r\n            onChange={onChangeCallback}\r\n            onKeyPress={onKeyPressCallback}\r\n            className={finalInputClassName}\r\n\r\n            {...restProps}\r\n        />\r\n        {error && <span className={finalSpanClassName}>{error}</span>}\r\n    </>\r\n});\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport { TextInput } from '../text-input/TextInput';\r\nimport s from './editableSpan.module.css'\r\n\r\nexport interface EditableSpanPropsType {\r\n    /**\r\n     * @param title - string, callback function that changes span title\r\n     */\r\n    onChangeSpan: (title: string) => void\r\n    /**\r\n     * init title of the editable span\r\n     */\r\n    title: string\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanPropsType> = React.memo(({onChangeSpan, title}) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputText, setInputText] = useState<string>('')\r\n\r\n    const changeTextInputHandler = (text: string) => {\r\n        setInputText(text)\r\n    }\r\n    const keyPressEnterHandler = () => {\r\n        setEditMode(false)\r\n        onChangeSpan(inputText)\r\n    }\r\n    const onBlurInputHandler = () => {\r\n        setEditMode(false)\r\n        onChangeSpan(inputText)\r\n    }\r\n    const onDoubleClickSpan = () => {\r\n        setEditMode(true)\r\n        setInputText(title)\r\n    }\r\n\r\n    console.log('editable-span')\r\n\r\n    return (\r\n        <>\r\n            {editMode ? <TextInput className={s.input}\r\n                                   onBlur={onBlurInputHandler}\r\n                                   autoFocus\r\n                                   onChangeText={changeTextInputHandler}\r\n                                   value={inputText}\r\n                                   onEnter={keyPressEnterHandler}/>\r\n                       : <span className={s.span} onDoubleClick={onDoubleClickSpan}>{title}</span>}\r\n        </>\r\n    )\r\n})\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    headers: {\r\n        'API-KEY': '4deb8f14-6cf3-406a-968c-ffbe6aebefc3'\r\n    }\r\n})","import {Button} from '../button/Button';\r\nimport React, {MouseEvent} from 'react';\r\nimport s from './Taskitem.module.css'\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {TaskItemType, TaskStatuses} from '../../api/todolist-api';\r\n\r\nexport interface TaskItemPropsType {\r\n    /**\r\n     * From what list of tasks?\r\n     */\r\n    toDoListId: string\r\n    /**\r\n     * Pass task data\r\n     */\r\n    task: TaskItemType\r\n    /**\r\n     * @param id type: string (task id)\r\n     * @param toDoListId string (todolis id)\r\n     * @param status enum TaskStatuses (task status)\r\n     */\r\n    changeIsDone: (id: string, toDoListId: string, status: TaskStatuses) => void\r\n    /**\r\n     * @param id type: string (task id)\r\n     * @param idTodoList string (todolis id)\r\n     */\r\n    onRemoveTaskHandler: (id: string, idTodoList: string) => void\r\n    /**\r\n     * @param id\r\n     * @param toDoListId\r\n     * @param title\r\n     */\r\n    changeTaskTitle: (id: string, toDoListId: string, title: string) => void\r\n};\r\n\r\nexport const TaskItem: React.FC<TaskItemPropsType> = React.memo(({\r\n                                                                     task,\r\n                                                                     changeIsDone,\r\n                                                                     onRemoveTaskHandler,\r\n                                                                     toDoListId,\r\n                                                                     changeTaskTitle\r\n                                                                 }) => {\r\n\r\n    const onChangeIsDoneHandler = (e: MouseEvent<HTMLDivElement>) => {\r\n        if(e.ctrlKey) {\r\n            task.status === TaskStatuses.New\r\n                ? changeIsDone(task.id, toDoListId, TaskStatuses.Completed)\r\n                : changeIsDone(task.id, toDoListId, TaskStatuses.New)\r\n        }\r\n    }\r\n\r\n    const onChangeTaskTitle = (title: string) => changeTaskTitle(task.id, toDoListId, title)\r\n\r\n    console.log('task item')\r\n\r\n    return (\r\n        <li key={task.id}\r\n            className={task.status === TaskStatuses.New ? s.taskItem : s.taskItem + ' ' + s.isDone}>\r\n            <div className={s.contentText} onClick={onChangeIsDoneHandler}>\r\n                <EditableSpan onChangeSpan={onChangeTaskTitle} title={task.title}/>\r\n            </div>\r\n            <Button name={'X'} callBack={() => onRemoveTaskHandler(task.id, toDoListId)}/>\r\n        </li>\r\n    )\r\n});\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../../App.css';\r\n\r\ntype ErrorPropsType = {\r\n    text: string | boolean\r\n};\r\n\r\n\r\nexport const Error: React.FC<ErrorPropsType> = React.memo(({text}) => {\r\n    \r\n    return (\r\n        <div className=\"error-message\">\r\n            {text}\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\n\r\n\r\n","import {TextInput} from '../text-input/TextInput'\r\nimport {Button} from '../button/Button'\r\nimport React, {useCallback, useState} from 'react'\r\nimport s from './AddItemForm.module.css'\r\nimport {Error} from './../error/Error'\r\n\r\ninterface AddItemFormPropsType {\r\n    /** @param title the parameter must be a string */\r\n    addItem: (title: string) => void\r\n    /** Will placeholder be set for the text field? */\r\n    placeholder?: string\r\n}\r\n\r\n/**\r\n * The main component that adds some text entity through the callback function\r\n */\r\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({addItem, placeholder}) => {\r\n\r\n    const [inputText, setInputText] = useState<string>('')\r\n    const [error, setError] = useState<string>('')\r\n\r\n    const onChangeInputHandler = (text: string) => {\r\n        setError('')\r\n        setInputText(text)\r\n    }\r\n\r\n    const addTaskButtonHandler = useCallback(() => {\r\n        if (inputText.trim()) {\r\n            addItem(inputText.trim())\r\n            setInputText('')\r\n        } else {\r\n            setError('Enter something')\r\n            setInputText('')\r\n        }\r\n    }, [inputText, addItem])\r\n\r\n    console.log('Add-Item-Form')\r\n\r\n    return (\r\n        <div className={s.form}>\r\n            <TextInput placeholder={placeholder ? placeholder : 'Enter text...'}\r\n                       className={error ? \"error\" : s.input}\r\n                       type={'text'}\r\n                       value={inputText}\r\n                       onChangeText={onChangeInputHandler}\r\n                       onEnter={addTaskButtonHandler}/>\r\n            <Button name={'+'} callBack={addTaskButtonHandler}/>\r\n            {error && <Error text={error}/>}\r\n        </div>\r\n    )\r\n})\r\n","import React, {useCallback} from 'react';\r\nimport {TaskItem} from '../taskitem/TaskItem';\r\nimport s from './todolist.module.css';\r\nimport {CgCloseR} from 'react-icons/cg';\r\nimport {AddItemForm} from '../add-item-form/AddItemForm';\r\nimport {Button} from '../button/Button';\r\nimport {EditableSpan} from '../editable-span/EditableSpan';\r\nimport {TaskItemType, TaskStatuses} from '../../api/todolist-api';\r\nimport {FilterType} from '../../state/todolist-reducer/todolist-reducer';\r\n\r\nexport type TodoListPropsType = {\r\n    /**\r\n     * todolist id\r\n     */\r\n    id: string\r\n    /**\r\n     * todolist title\r\n     */\r\n    title: string\r\n    /**\r\n     * array of tasks that belong to the current list\r\n     */\r\n    tasks: Array<TaskItemType>\r\n    /**\r\n     * callback function for remove task\r\n     * @param id - string\r\n     * @param toDoListId - todolist id\r\n     */\r\n    removeTask: (id: string, toDoListId: string) => void\r\n    /**\r\n     * callback function for remove todolist\r\n     * @param id - string\r\n     */\r\n    removeToDoList: (id: string) => void\r\n    /**\r\n     * callback function for to add a task\r\n     * @param title - string\r\n     * @param toDoListId - todolist id\r\n     */\r\n    addTask: (title: string, toDoListId: string) => void\r\n    /**\r\n     * callback function for to change the status of a task\r\n     * @param id - task id\r\n     * @param toDoListId - todolist id\r\n     * @param status - task statuses\r\n     */\r\n    changeIsDone: (id: string, toDoListId: string, status: TaskStatuses) => void\r\n    /**\r\n     * callback function for to change the filter of a todolist\r\n     * @param filter\r\n     * @param toDoListId\r\n     */\r\n    changeFilter: (filter: FilterType, toDoListId: string) => void\r\n    /**\r\n     * filter value\r\n     */\r\n    filter: FilterType\r\n    /**\r\n     * callback function for to change the title of a task\r\n     * @param id - task id\r\n     * @param toDoListId - todolist id\r\n     * @param title - task title\r\n     */\r\n    changeTaskTitle: (id: string, toDoListId: string, title: string) => void\r\n    /**\r\n     * callback function for to change the title of a todolist\r\n     * @param id - task id\r\n     * @param title - todolist id\r\n     */\r\n    changeToDoListTitle: (id: string, title: string) => void\r\n}\r\n\r\nexport const TodoList: React.FC<TodoListPropsType> = React.memo(({\r\n                                                                     title, tasks,\r\n                                                                     removeTask, addTask,\r\n                                                                     changeIsDone, id,\r\n                                                                     removeToDoList, changeFilter,\r\n                                                                     filter, changeTaskTitle,\r\n                                                                     changeToDoListTitle\r\n                                                                 }) => {\r\n\r\n    const onChangeTodoListTitle = useCallback((title: string) => changeToDoListTitle(id, title), [changeToDoListTitle, id])\r\n    const onRemoveTaskHandler = useCallback((id: string, toDoListId: string) => removeTask(id, toDoListId), [removeTask])\r\n\r\n    const filteredTask = filter === 'active' ? tasks.filter(t => t.status === TaskStatuses.New) :\r\n        filter === 'completed' ? tasks.filter(t => t.status === TaskStatuses.Completed) : tasks\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <CgCloseR onClick={() => removeToDoList(id)} className={s.closeSvg}/>\r\n            <h3 className={s.header}>\r\n                <EditableSpan onChangeSpan={onChangeTodoListTitle} title={title}/>\r\n            </h3>\r\n            <AddItemForm addItem={(title: string) => addTask(title, id)}/>\r\n            <ul className={s.itemsList}>\r\n                {filteredTask.map(t => <TaskItem toDoListId={id} task={t} key={t.id} changeIsDone={changeIsDone}\r\n                                                 onRemoveTaskHandler={onRemoveTaskHandler}\r\n                                                 changeTaskTitle={changeTaskTitle}/>)}\r\n            </ul>\r\n            <div className={s.btnWrapper}>\r\n                <Button active={filter === 'all'} name={'All'} callBack={() => changeFilter('all', id)}/>\r\n                <Button active={filter === 'active'} name={'Active'} callBack={() => changeFilter('active', id)}/>\r\n                <Button active={filter === 'completed'} name={'Completed'}\r\n                        callBack={() => changeFilter('completed', id)}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import { v1 } from 'uuid';\r\nimport {TaskItemType, TaskPrioritys, TaskStatuses} from '../../api/todolist-api';\r\nimport {\r\n    AddTaskActionType,\r\n    ChangeIsDoneTaskActionType,\r\n    ChangeTaskTitleActionType,\r\n    RemoveTaskActionType,\r\n    TaskActionType,\r\n    TaskStateType\r\n} from './task-reducer.types';\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const addTaskAC = (title: string, toDoListId: string): AddTaskActionType => (\r\n    {type: 'ADD_TASK', title, toDoListId}\r\n)\r\nexport const removeTaskAC = (id: string, toDoListId: string): RemoveTaskActionType => (\r\n    {type: 'REMOVE_TASK', id, toDoListId}\r\n)\r\nexport const changeIsDoneTaskAC = (id: string, toDoListId: string, status: TaskStatuses): ChangeIsDoneTaskActionType => (\r\n    {type: 'CHANGE_IS_DONE_TASK', id, toDoListId, status}\r\n)\r\nexport const changeTaskTitleAC = (id: string, toDoListId: string, title: string): ChangeTaskTitleActionType => (\r\n    {type: 'CHANGE_TASK_TITLE', id, toDoListId, title}\r\n)\r\n\r\n/** create new task function (function creator)*/\r\nconst creteTask = (title: string): TaskItemType => {\r\n    return {\r\n        id: v1(), title, status: TaskStatuses.New,\r\n        order: 0, todoListId: 'todolistId1', addedDate: '', description: '',\r\n        completed: false, deadline: '', priority: TaskPrioritys.Hi, startDate: ''\r\n    }\r\n}\r\n\r\nexport const taskReducer = (state: TaskStateType = initialState, action: TaskActionType): TaskStateType => {\r\n    switch (action.type) {\r\n        case 'ADD_TASK':\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: [creteTask(action.title), ...state[action.toDoListId]]\r\n            }\r\n        case 'REMOVE_TASK':\r\n            return {...state, [action.toDoListId]: state[action.toDoListId].filter(t => t.id !== action.id)}\r\n        case 'CHANGE_IS_DONE_TASK':\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: state[action.toDoListId].map(t => t.id === action.id ? {\r\n                    ...t,\r\n                    status: action.status\r\n                } : t)\r\n            }\r\n        case 'CHANGE_TASK_TITLE':\r\n            return {\r\n                ...state,\r\n                [action.toDoListId]: state[action.toDoListId].map(t => t.id === action.id ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import {v1} from 'uuid'\r\nimport {TodoListType} from '../../api/todolist-api'\r\n\r\nexport type AddTodoListActionType = { type: 'ADD-TODOLIST', title: string, id: string }\r\nexport type RemoveTodoListActionType = { type: 'REMOVE-TODOLIST', id: string }\r\nexport type ChangeTodoListTitleActionType = { type: 'CHANGE-TODOLIST-TITLE', id: string, title: string }\r\nexport type ChangeTodolistFilterActionType = { type: 'CHANGE-TODOLIST-FILTER', id: string, filter: FilterType }\r\n\r\nexport const addTodoListAC = (title: string): AddTodoListActionType => ({type: 'ADD-TODOLIST', title, id: v1()})\r\nexport const removeTodoListAC = (id: string): RemoveTodoListActionType => ({type: 'REMOVE-TODOLIST', id})\r\nexport const changeTodoListTitleAC = (title: string, id: string): ChangeTodoListTitleActionType => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n})\r\nexport const changeTodoListFilterAC = (id: string, filter: FilterType): ChangeTodolistFilterActionType => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n})\r\n\r\ntype ActionType =\r\n    AddTodoListActionType\r\n    | RemoveTodoListActionType\r\n    | ChangeTodoListTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nexport type FilterType = 'all' | 'completed' | 'active'\r\n\r\nexport type ToDoListDomainType = TodoListType & {\r\n    filter: FilterType\r\n}\r\n\r\nconst initialState: Array<ToDoListDomainType> = []\r\n\r\nexport const todoListReducer = (state: Array<ToDoListDomainType> = initialState, action: ActionType): Array<ToDoListDomainType> => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [{id: action.id, title: action.title, filter: 'all', addedDate: '', order: 0}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(t => t.id === action.id ? {...t, filter: action.filter} : t)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(t => t.id === action.id ? {...t, title: action.title} : t)\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TodoList} from './components/todolist/TodoList';\r\nimport {AddItemForm} from './components/add-item-form/AddItemForm';\r\nimport {TaskStateType} from './state/task-reducer/task-reducer.types';\r\nimport {addTaskAC, changeIsDoneTaskAC, changeTaskTitleAC, removeTaskAC} from './state/task-reducer/task-reducer';\r\nimport {\r\n    addTodoListAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    FilterType,\r\n    removeTodoListAC,\r\n    ToDoListDomainType\r\n} from './state/todolist-reducer/todolist-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootState} from './state/store-redux';\r\nimport { TaskStatuses } from './api/todolist-api';\r\n\r\nfunction AppWitchRedux() {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    const tasks = useSelector<AppRootState, TaskStateType>(state => state.task)\r\n    const todolists = useSelector<AppRootState, Array<ToDoListDomainType>>(state => state.todolists)\r\n\r\n    const addTask = useCallback((title: string, toDoListId: string) => dispatch(addTaskAC(title, toDoListId)), [dispatch])\r\n    const removeTask = useCallback((id: string, toDoListId: string) => dispatch(removeTaskAC(id, toDoListId)), [dispatch])\r\n    const changeIsDoneTask = useCallback((id: string, toDoListId: string, status: TaskStatuses) => dispatch(changeIsDoneTaskAC(id, toDoListId, status)), [dispatch])\r\n    const changeTaskTitle = useCallback((id: string, toDoListId: string, title: string) => dispatch(changeTaskTitleAC(id, toDoListId, title)), [dispatch])\r\n    \r\n    const addToDoList = useCallback((title: string) => dispatch(addTodoListAC(title)), [dispatch])\r\n    const removeToDoList = useCallback((id: string) => dispatch(removeTodoListAC(id)), [dispatch])\r\n    const changeFilter = useCallback((filter: FilterType, toDoListId: string) => dispatch(changeTodoListFilterAC(toDoListId, filter)), [dispatch])\r\n    const changeToDoListTitle = useCallback((id: string, title: string) => dispatch(changeTodoListTitleAC(title, id)), [dispatch])\r\n    \r\n    console.log('App-Redux')\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <AddItemForm addItem={addToDoList}/>\r\n            <div className=\"todolist-wrapper\">\r\n                {todolists.map(toDoList => {\r\n\r\n                    return <TodoList key={toDoList.id} id={toDoList.id}\r\n                                     filter={toDoList.filter} title={toDoList.title}\r\n                                     tasks={tasks[toDoList.id]} removeToDoList={removeToDoList}\r\n                                     changeFilter={changeFilter} removeTask={removeTask}\r\n                                     addTask={addTask} changeTaskTitle={changeTaskTitle}\r\n                                     changeToDoListTitle={changeToDoListTitle} changeIsDone={changeIsDoneTask}\r\n                    />\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWitchRedux;\r\n\r\n","import {combineReducers, createStore} from 'redux';\r\nimport {taskReducer} from './task-reducer/task-reducer';\r\nimport {todoListReducer} from './todolist-reducer/todolist-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todoListReducer,\r\n    task: taskReducer\r\n})\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './nullstyle.css'\r\nimport AppWitchRedux from './AppWitchRedux';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './state/store-redux';\r\n\r\nReactDOM.render(  /*<App /> */                                           /* ---> SPA using local state (useState)*/\r\n                  /*<AppWitchReducer/>*/                                 /* ---> SPA using reducers as state (useReducer)*/\r\n                    <Provider store={store}><AppWitchRedux/></Provider>, /*  ---> SPA using reducers as state control (useDispatch && useSelector)*/\r\n         document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"todolist_wrapper__2Y-Vh\",\"header\":\"todolist_header__2cUHn\",\"input\":\"todolist_input__2WJqd\",\"addForm\":\"todolist_addForm__3n096\",\"itemsList\":\"todolist_itemsList__3Clwr\",\"reactSvg\":\"todolist_reactSvg__H5nCE\",\"startSvg\":\"todolist_startSvg__2N_vD\",\"btnWrapper\":\"todolist_btnWrapper__3IYZb\",\"closeSvg\":\"todolist_closeSvg__2jUzo\"};"],"sourceRoot":""}